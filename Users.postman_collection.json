{
	"info": {
		"_postman_id": "a62d9451-11b7-4806-913c-f697a507596c",
		"name": "Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33696721"
	},
	"item": [
		{
			"name": "List User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify status code is 200\",function(){\r",
							"   pm.response.to.have.status(200);\r",
							"   });\r",
							"\r",
							"   // 2 : Test the Status description\r",
							"\r",
							"   pm.test(\"To verify status description is OK\",function(){\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"total\");\r",
							"});\r",
							"\r",
							"// To print response body \r",
							"\r",
							"var ResponseBody = {\"page\":2,\"per_page\":6,\"total\":12,\"total_pages\":2,\"data\":[{\"id\":7,\"email\":\"michael.lawson@reqres.in\",\"first_name\":\"Michael\",\"last_name\":\"Lawson\",\"avatar\":\"https://reqres.in/img/faces/7-image.jpg\"},{\"id\":8,\"email\":\"lindsay.ferguson@reqres.in\",\"first_name\":\"Lindsay\",\"last_name\":\"Ferguson\",\"avatar\":\"https://reqres.in/img/faces/8-image.jpg\"},{\"id\":9,\"email\":\"tobias.funke@reqres.in\",\"first_name\":\"Tobias\",\"last_name\":\"Funke\",\"avatar\":\"https://reqres.in/img/faces/9-image.jpg\"},{\"id\":10,\"email\":\"byron.fields@reqres.in\",\"first_name\":\"Byron\",\"last_name\":\"Fields\",\"avatar\":\"https://reqres.in/img/faces/10-image.jpg\"},{\"id\":11,\"email\":\"george.edwards@reqres.in\",\"first_name\":\"George\",\"last_name\":\"Edwards\",\"avatar\":\"https://reqres.in/img/faces/11-image.jpg\"},{\"id\":12,\"email\":\"rachel.howell@reqres.in\",\"first_name\":\"Rachel\",\"last_name\":\"Howell\",\"avatar\":\"https://reqres.in/img/faces/12-image.jpg\"}],\"support\":{\"url\":\"https://reqres.in/#support-heading\",\"text\":\"To keep ReqRes free, contributions towards server costs are appreciated!\"}}\r",
							"\r",
							"console.log(ResponseBody);\r",
							"\r",
							"//  4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							"\r",
							"    // To fetch the response body\r",
							"\r",
							"pm.test(\"Response body fetched\", function()\r",
							"{\r",
							"    // for connecting different requests\r",
							"\r",
							"   var ResponseBody1=pm.response.json();\r",
							"   console.log(ResponseBody1.data.avatar);\r",
							"   var userId=ResponseBody1.data[0].id\r",
							"\r",
							"   pm.collectionVariables.set(\"Id\",userId)\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/users?page=2",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"});\r",
							"\r",
							"// 2: To verify the status description \r",
							"\r",
							"pm.test(\"To verify the status description is OK\",function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"email\");\r",
							"});\r",
							"var ResponseBody=\r",
							"    {\"data\":{\"id\":7,\"email\":\"michael.lawson@reqres.in\",\"first_name\":\"Michael\",\"last_name\":\"Lawson\",\"avatar\":\"https://reqres.in/img/faces/7-image.jpg\"},\"support\":{\"url\":\"https://reqres.in/#support-heading\",\"text\":\"To keep ReqRes free, contributions towards server costs are appreciated!\"}}\r",
							"//  4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/users/{{Id}}",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 404\",function(){\r",
							"    \r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// 2 : Test to verify the Status description\r",
							"\r",
							"pm.test(\"To verify the status description Not Found\",function(){\r",
							"pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							"var ResponseBody={}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							"\r",
							"// To fetch the response body\r",
							"\r",
							"pm.test(\"Response body fetched\", function()\r",
							"{\r",
							"    // for connecting different requests\r",
							"\r",
							"   var ResponseBody1=pm.response.json();\r",
							"   console.log(ResponseBody1.data.avatar);\r",
							"   var userId=ResponseBody1.data[0].id\r",
							"\r",
							"   pm.collectionVariables.set(\"Id\",userId)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/users/{{Id}}\n\n",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users",
						"{{Id}}\n\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "List <Resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2 : Test to verify the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"page\": 1,\r",
							"    \"per_page\": 6,\r",
							"    \"total\": 12,\r",
							"    \"total_pages\": 2,\r",
							"    \"data\": [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"            \"name\": \"cerulean\",\r",
							"            \"year\": 2000,\r",
							"            \"color\": \"#98B2D1\",\r",
							"            \"pantone_value\": \"15-4020\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"            \"name\": \"fuchsia rose\",\r",
							"            \"year\": 2001,\r",
							"            \"color\": \"#C74375\",\r",
							"            \"pantone_value\": \"17-2031\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"            \"name\": \"true red\",\r",
							"            \"year\": 2002,\r",
							"            \"color\": \"#BF1932\",\r",
							"            \"pantone_value\": \"19-1664\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"            \"name\": \"aqua sky\",\r",
							"            \"year\": 2003,\r",
							"            \"color\": \"#7BC4C4\",\r",
							"            \"pantone_value\": \"14-4811\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"            \"name\": \"tigerlily\",\r",
							"            \"year\": 2004,\r",
							"            \"color\": \"#E2583E\",\r",
							"            \"pantone_value\": \"17-1456\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"            \"name\": \"blue turquoise\",\r",
							"            \"year\": 2005,\r",
							"            \"color\": \"#53B0AE\",\r",
							"            \"pantone_value\": \"15-5217\"\r",
							"        }\r",
							"    ],\r",
							"    \"support\": {\r",
							"        \"url\": \"https://reqres.in/#support-heading\",\r",
							"        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
							"    }\r",
							"}\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"year\", \"id\");\r",
							"});\r",
							"\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							"// To fetch the response body\r",
							"\r",
							"pm.test(\"Response body fetched\", function()\r",
							"{\r",
							"    // for connecting different requests\r",
							"\r",
							"   var ResponseBody1=pm.response.json();\r",
							"   console.log(ResponseBody1.data.avatar);\r",
							"   var userId=ResponseBody1.data[0].name\r",
							"\r",
							"   pm.collectionVariables.set(\"Id\",userId)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/unknown\n\n",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"unknown\n\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single<Resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2 : Test to verify the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"support\",\"url\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"data\": {\r",
							"        \"id\": 2,\r",
							"        \"name\": \"fuchsia rose\",\r",
							"        \"year\": 2001,\r",
							"        \"color\": \"#C74375\",\r",
							"        \"pantone_value\": \"17-2031\"\r",
							"    },\r",
							"    \"support\": {\r",
							"        \"url\": \"https://reqres.in/#support-heading\",\r",
							"        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
							"    }\r",
							"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/unknown/{{Id}}\n\n",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"unknown",
						"{{Id}}\n\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Resource Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 404\",function()\r",
							"{\r",
							"pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// 2 : Test to verify the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is Not Found\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							"var ResponseBody={}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/unknown/23\n\n",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"unknown",
						"23\n\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 201\",function()\r",
							"{\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// 2 : Test to verify the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is Created\",function()\r",
							"{\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\") ;\r",
							"});\r",
							"var ResponseBody={\"name\":\"morpheus\",\"job\":\"leader\",\"id\":\"167\",\"createdAt\":\"2024-04-04T17:13:06.797Z\"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/users",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test to verify the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2 : Test to verify the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK\",function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"\r",
							"var ResponseBody={\"name\":\"morpheus\",\"job\":\"zion resident\",\"updatedAt\":\"2024-04-04T17:30:34.732Z\"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/users/2",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK\",function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"job\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"name\": \"morpheus\",\r",
							"    \"job\": \"zion resident\",\r",
							"    \"updatedAt\": \"2024-04-04T17:33:32.516Z\"\r",
							"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/users/2",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 204\",function()\r",
							"{\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is No Content \", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							"var  ResponseBody={}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/users/2\n\n",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users",
						"2\n\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"   } );\r",
							"\r",
							"   // 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\",\"id\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"id\": 4,\r",
							"    \"token\": \"QpwL5tke4Pnpja7X4\"\r",
							"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/register",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 400\", function()\r",
							"{\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is Bad Request\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"error\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"error\": \"Missing password\"\r",
							"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/register",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200 \",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK \",function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"token\": \"QpwL5tke4Pnpja7X4\"\r",
							"}\r",
							"\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/login",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 400\",function()\r",
							"{\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is Bad Request\",function()\r",
							"{\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"error\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"error\": \"Missing password\"\r",
							"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_url}}/api/login",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delay Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 : Test the Status code\r",
							"\r",
							"pm.test(\"To verify the status code is 200\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2 : Test the Status description\r",
							"\r",
							"pm.test(\"To verify the status description is OK\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 3 : Test to verify the response time\r",
							"\r",
							"pm.test(\"Response time should be less than 200ms\",function()\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// 4(1) : Test to verify body\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
							"});\r",
							"var ResponseBody={\r",
							"    \"page\": 1,\r",
							"    \"per_page\": 6,\r",
							"    \"total\": 12,\r",
							"    \"total_pages\": 2,\r",
							"    \"data\": [\r",
							"        {\r",
							"            \"id\": 1,\r",
							"            \"email\": \"george.bluth@reqres.in\",\r",
							"            \"first_name\": \"George\",\r",
							"            \"last_name\": \"Bluth\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 2,\r",
							"            \"email\": \"janet.weaver@reqres.in\",\r",
							"            \"first_name\": \"Janet\",\r",
							"            \"last_name\": \"Weaver\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 3,\r",
							"            \"email\": \"emma.wong@reqres.in\",\r",
							"            \"first_name\": \"Emma\",\r",
							"            \"last_name\": \"Wong\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 4,\r",
							"            \"email\": \"eve.holt@reqres.in\",\r",
							"            \"first_name\": \"Eve\",\r",
							"            \"last_name\": \"Holt\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 5,\r",
							"            \"email\": \"charles.morris@reqres.in\",\r",
							"            \"first_name\": \"Charles\",\r",
							"            \"last_name\": \"Morris\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\r",
							"        },\r",
							"        {\r",
							"            \"id\": 6,\r",
							"            \"email\": \"tracey.ramos@reqres.in\",\r",
							"            \"first_name\": \"Tracey\",\r",
							"            \"last_name\": \"Ramos\",\r",
							"            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\r",
							"        }\r",
							"    ],\r",
							"    \"support\": {\r",
							"        \"url\": \"https://reqres.in/#support-heading\",\r",
							"        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\r",
							"    }\r",
							"}\r",
							"// 4(2) : To verify the entire response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(ResponseBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_url}}/api/users?delay=3",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "Base_url",
			"value": "https://reqres.in"
		},
		{
			"key": "Id",
			"value": ""
		}
	]
}